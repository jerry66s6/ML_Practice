# -*- coding: utf-8 -*-
"""Pegasos Kernel SVM Implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/123Cu3AiEXBXwwC2Yi_1G8lUqeCWUl3AO
"""

import numpy as np

def linear_kernel(x: np.ndarray, y: np.ndarray) -> float:
    # Your code here
    return np.dot(x, y)

def rbf_kernel(x: np.ndarray, y: np.ndarray, sigma=1.0) -> float:
    return np.exp(-np.linalg.norm(x - y) ** 2 / (2 * sigma ** 2))

def compute_decision_function(alphas: np.ndarray, labels: np.ndarray, data: np.ndarray,
                               x: np.ndarray, kernel_function) -> float:
    decision = 0
    for i in range(len(labels)):
        decision += alphas[i] * labels[i] * kernel_function(data[i], x)
    # Your code here
    return decision

def pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear',
                       lambda_val=0.01, iterations=100, sigma=1.0) -> (list, float):
    # Your code here
    if kernel == 'linear':
        kernel_function = linear_kernel
    elif kernel == 'rbf':
        kernel_function = lambda x, y: rbf_kernel(x, y, sigma)

    alphas = np.zeros((len(data)))
    b = 0

    for t in range(1, iterations + 1):
        for i in range(len(data)):
            x = data[i]
            y = labels[i]
            eta = 1 / (lambda_val * t)
            decision = compute_decision_function(alphas, labels, data, x, kernel_function) + b
            if y * decision < 1:
                alphas[i] += eta * (y - lambda_val * alphas[i])
                b += eta * y

    return alphas, b