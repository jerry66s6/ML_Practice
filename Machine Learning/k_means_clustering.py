# -*- coding: utf-8 -*-
"""K-Means Clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/123Cu3AiEXBXwwC2Yi_1G8lUqeCWUl3AO
"""

import numpy as np
import math

def k_means_clustering(points: list[tuple[float, float]],
                       k: int,
                       initial_centroids: list[tuple[float, float]],
                       max_iterations: int) -> list[tuple[float, float]]:
    # Your code here
    for _ in range(max_iterations):
        close_list = []
        for point in points:
            each_point = []
            for cen in initial_centroids:
                distance = 0
                for i in range(len(points[0])):
                    distance += (point[i] - cen[i]) ** 2
                distance = math.sqrt(distance)
                each_point.append(distance)
            close = np.argmin(each_point)
            close_list.append(close)

        newcen = []
        for i in range(k):
            newcluster = []
            for j in range(len(points)):
                if i == close_list[j]:
                    newcluster.append(points[j])
            if newcluster:
                meanpoint = tuple(np.mean(np.array(newcluster), axis=0))
                newcen.append(meanpoint)
            else:
                newcen.append(initial_centroids[i])

        initial_centroids = newcen

    final_centroids = initial_centroids
    return final_centroids