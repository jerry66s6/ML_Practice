# -*- coding: utf-8 -*-
"""SVD of a 2x2 Matrix using eigen values & vectors.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/123Cu3AiEXBXwwC2Yi_1G8lUqeCWUl3AO
"""

import numpy as np
from typing import Tuple

def compute_ATA_and_AAT(A: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:
    ATA = np.matmul(A.T, A)
    AAT = np.matmul(A, A.T)
    return ATA, AAT

def compute_eigenvalues(matrix: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:
    eigenvalues, eigenvectors = np.linalg.eig(matrix)
    return eigenvalues, np.round(eigenvectors, 4)

def compute_singular_values(eigenvalues: np.ndarray) -> np.ndarray:
    return np.sqrt(eigenvalues)

def form_V(eigenvectors: np.ndarray) -> np.ndarray:
    return eigenvectors

def compute_U(A: np.ndarray, V: np.ndarray, singular_values: np.ndarray) -> np.ndarray:
    Sinv = np.diag(1 / singular_values)
    U = np.matmul(np.matmul(A, V), Sinv)
    return np.round(U, 4)

def verify_orthogonality(matrix: np.ndarray) -> bool:
    utu = np.matmul(matrix.T, matrix)
    identity = np.identity(utu.shape[0])
    return np.allclose(utu, identity)

def svd_2x2(A: np.ndarray) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
    ATA, AAT = compute_ATA_and_AAT(A)
    eigenvalues, eigenvectors = compute_eigenvalues(ATA)
    singular_values = compute_singular_values(eigenvalues)
    V = form_V(eigenvectors)
    U = compute_U(A, V, singular_values)
    return U, singular_values, V.T