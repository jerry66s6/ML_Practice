# -*- coding: utf-8 -*-
"""Implement Reduced Row Echelon Form (RREF) Function

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/123Cu3AiEXBXwwC2Yi_1G8lUqeCWUl3AO
"""

import numpy as np

def find_pivot(matrix: np.ndarray, col: int, start_row: int = 0) -> int:
	for row in range(start_row, len(matrix)):
		if matrix[row, col] != 0:
			return row
	return -1

def normalize_pivot_row(matrix: np.ndarray, row: int) -> np.ndarray:
    # Find the first non-zero column in this row
    for col in range(matrix.shape[1]):
        if matrix[row, col] != 0:
            matrix[row] = matrix[row] / matrix[row, col]
            break
    return matrix

def eliminate_column_entries(matrix: np.ndarray, pivot_row: int, pivot_col: int) -> np.ndarray:
	"""Make all other elements in the pivot column zero."""
	# Your code here
	n, m = matrix.shape
	for i in range(n):
		if i == pivot_row:
			pass
		else:
			pivot = matrix[pivot_row, pivot_col]
			relate = matrix[i, pivot_col]
			ratio = - relate/pivot
			for j in range(m):
				matrix[i,j] += matrix[pivot_row, j]*ratio
	return matrix

def rref(matrix):
	matrix = matrix.astype(float)
	n,m = matrix.shape
	pivot_row = 0
	for pivot_col in range(m):
		if pivot_row >= n:
			break
		index = find_pivot(matrix, pivot_col, pivot_row)
		if index == -1:

			continue
		if index != pivot_row:
			matrix[[pivot_row, index]] = matrix[[index, pivot_row]]
		matrix = normalize_pivot_row(matrix, pivot_row)
		matrix = eliminate_column_entries(matrix, pivot_row, pivot_col)
		pivot_row += 1

	return matrix